@page "/project/create"
@using Front.ApiClient.Interfaces
@using Front.Components
@using Front.Components.Tables
@using Front.Helpers
@using Shared.DTOs.Projects
@using Shared.DTOs.Users
@inject IProjectsApi ProjectsApi
@inject IUsersApi UserApi
@inject ISnackbar Snackbar
@inject NavigationManager Nav

<PageTitle>Crear Proyecto</PageTitle>

<MudContainer Class="mt-5" MaxWidth="MaxWidth.Medium">
	<Section Title="Creación de Proyecto">
		<MudForm @ref=form Model="createProjectDto">
			<MudTextField Class="mb-4" T="string" @bind-Value="@createProjectDto.Name" Label="Nombre" Required="true" RequiredError="Es necesario introducir el nombre del proyecto" />
			<MudTextField Class="mb-4" T="string" @bind-Value="@createProjectDto.Description" Label="Descripción" />
			<UsersSelectionTable class="mt-4" @bind-SelectedUsers=users></UsersSelectionTable>
			<MudButton OnClick="CreateProject" Color="Color.Primary" Variant="Variant.Filled">Crear Proyecto</MudButton>
		</MudForm>
	</Section>
</MudContainer>
@code {
	CreateProjectDto createProjectDto = new CreateProjectDto();
	MudForm? form;
	bool loading;
	HashSet<FilteredUserDto> users = [];
	async Task CreateProject()
	{
		if (form is null) return;

		await form.Validate();
		if (!form.IsValid) return;

		try
		{
			createProjectDto.UsersIds = users.Select(u => u.Id).ToList();
			loading = true;
			ProjectDto createdProject = await ProjectsApi.CreateProject(createProjectDto);
			Dictionary<string, string> parameters = new();
			parameters.Add(nameof(ProjectPage.ProjectId), createdProject.Id.ToString());
			Nav.NavigateTo<ProjectPage>(parameters);
		}
		catch (Exception ex)
		{
			Snackbar.Add(ex.Message, Severity.Error);
		}
		finally
		{
			loading = false;
		}
	}
}
