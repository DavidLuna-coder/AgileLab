@page "/project/create"
@using Front.ApiClient.Interfaces
@using Front.Components
@using Front.Components.Tables
@using Front.Helpers
@using Shared.Constants
@using Shared.DTOs.Projects
@using Shared.DTOs.Users
@inject IProjectsApi ProjectsApi
@inject IUsersApi UserApi
@inject ISnackbar Snackbar
@inject NavigationManager Nav

<PageTitle>Crear Proyecto</PageTitle>

<MudContainer Class="mt-5" MaxWidth="MaxWidth.Medium">
	<Section Title="Creación de Proyecto">
		<MudForm @ref=form Model="createProjectDto">
			<MudStack>
				<MudTextField Disabled=loading Class="mb-4" T="string" @bind-Value="@createProjectDto.Name" Label="Nombre" Required="true" RequiredError="Es necesario introducir el nombre del proyecto" />
				<MudTextField AutoGrow Disabled=loading Class="mb-4" T="string" @bind-Value="@createProjectDto.Description" Label="Descripción" />
				<MudSelect Placeholder="Selecciona una plantilla de proyecto" Margin=Margin.Dense Clearable T="string" @bind-Value="@createProjectDto.Template">
					<MudSelectItem Value="@GitlabProjectTemplates.DotNetCore">.Net Core</MudSelectItem>
					<MudSelectItem Value="@GitlabProjectTemplates.Spring">Spring</MudSelectItem>
					<MudSelectItem Value="@GitlabProjectTemplates.Express">Express</MudSelectItem>
					<MudSelectItem Value="@GitlabProjectTemplates.Android">Android</MudSelectItem>
					<MudSelectItem Value="@GitlabProjectTemplates.RubyOnRails">Ruby on Rails</MudSelectItem>
				</MudSelect>

				<UsersSelectionTable class="mt-4" @bind-SelectedUsers=users></UsersSelectionTable>
				<MudStack Row Justify="Justify.FlexEnd">
					<MudButton Variant="Variant.Filled" OnClick="ReturnToProjectsPage">Cancelar</MudButton>
					<MudButton Disabled=loading Variant="Variant.Filled" OnClick="CreateProject" Color="Color.Primary">Guardar</MudButton>
				</MudStack>
			</MudStack>
		</MudForm>
	</Section>
</MudContainer>
@code {
	CreateProjectDto createProjectDto = new();
	MudForm? form;
	bool loading;
	HashSet<FilteredUserDto> users = [];

	async Task CreateProject()
	{
		if (form is null) return;

		await form.Validate();
		if (!form.IsValid) return;

		try
		{
			createProjectDto.Template = string.IsNullOrEmpty(createProjectDto.Template) ? null : createProjectDto.Template;
			createProjectDto.UsersIds = users.Select(u => u.Id).ToList();
			loading = true;
			ProjectDto createdProject = await ProjectsApi.CreateProject(createProjectDto);
			Dictionary<string, object> parameters = new();
			parameters.Add(nameof(ProjectPage.ProjectId), createdProject.Id.ToString());
			Nav.NavigateTo<ProjectPage>(parameters);
		}
		catch (Exception ex)
		{
			Snackbar.Add(ex.Message, Severity.Error);
		}
		finally
		{
			loading = false;
		}
	}

	void ReturnToProjectsPage()
	{
		Nav.NavigateTo<ProjectsPage>();
	}
}
