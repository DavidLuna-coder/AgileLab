@page "/projects/{ProjectId}"
@using Front.ApiClient.Interfaces
@using Front.Components
@using Front.Helpers
@using Shared.DTOs.Pagination
@using Shared.DTOs.Projects
@using Shared.DTOs.Users

@inject IProjectsApi ProjectsApi
@inject ISnackbar Snackbar
@inject NavigationManager Nav
@inject IUsersApi UsersApi

@if (loading)
{
	<MudProgressLinear Indeterminate />
}
else
{
	<Section Title="@project.Name">
		<Actions>
			<MudButton>Editar</MudButton>
			<MudButton>Eliminar</MudButton>
		</Actions>
		<ChildContent>
			<MudText Typo="Typo.h6">Descripción</MudText>
			<MudText Typo="Typo.body1">@project.Description</MudText>
		</ChildContent>
	</Section>
}

@code {
	[Parameter]
	public string ProjectId { get; set; } = string.Empty;
	ProjectDto project = default!;
	bool loading = true;
	protected override async Task OnInitializedAsync()
	{
		try
		{
			project = await ProjectsApi.GetProject(new Guid(ProjectId));
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
			Snackbar.Add("Error al cargar el proyecto", Severity.Error);
			Nav.NavigateTo<ProjectsPage>();
		}
		finally
		{
			loading = false;
		}
		await base.OnInitializedAsync();
	}

	async Task<TableData<FilteredUserDto>> ReloadUsers(TableState tableState, CancellationToken cancellationToken)
	{
		GetUsersQueryParameters getUserQueryParameters = new GetUsersQueryParameters();
		var request = new PaginatedRequestDto<GetUsersQueryParameters> { Filters = getUserQueryParameters, Page = tableState.Page, PageSize = tableState.PageSize };
		var response = await UsersApi.GetFilteredUsers(request);

		return new TableData<FilteredUserDto>() { TotalItems = response.TotalCount, Items = response.Items };
	}
}
