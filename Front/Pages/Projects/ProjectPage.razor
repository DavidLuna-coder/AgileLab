@page "/projects/{ProjectId}"
@using Front.ApiClient.Interfaces
@using Front.Components
@using Front.Components.Tables
@using Front.Helpers
@using Front.Services.StateService
@using Shared.DTOs.Filters
@using Shared.DTOs.Pagination
@using Shared.DTOs.Projects
@using Shared.DTOs.Users
@using Shared.Enums

@inject IProjectsApi ProjectsApi
@inject ISnackbar Snackbar
@inject NavigationManager Nav
@inject IUsersApi UsersApi
@inject ProjectStateService ProjectStateService
@inject IUserService UserService
@if (loading)
{
	<MudProgressLinear Indeterminate />
}
else
{
	<Section Title="@project.Name">
		<Actions>
			<MudStack Row Spacing="2" AlignItems="AlignItems.Center">
				@if ((UserService.Permissions & Permissions.EditProjects) != 0)
				{
					<MudTooltip Text="Editar">
						<MudButton OnClick="OnEditButtonClick" Color="Color.Primary" Size="Size.Small">
							<MudIcon Icon="@Icons.Material.Filled.Edit" />
						</MudButton>
					</MudTooltip>
				}
				@if ((UserService.Permissions & Permissions.ArchiveProjects) != 0)
				{
					@if (!project.IsArchived)
					{
						<MudTooltip Text="Archivar">
							<MudButton Color="Color.Warning" OnClick="ArchiveProject" Size="Size.Small">
								<MudIcon Icon="@Icons.Material.Filled.Archive" />
							</MudButton>
						</MudTooltip>
					}
					else
					{
						<MudTooltip Text="Desarchivar">
							<MudButton Color="Color.Success" OnClick="UnarchiveProject" Size="Size.Small">
								<MudIcon Icon="@Icons.Material.Filled.Unarchive" />
							</MudButton>
						</MudTooltip>
					}
				}
				@if ((UserService.Permissions & Permissions.DeleteProjects) != 0)
				{
					<MudTooltip Text="Eliminar">
						<MudButton OnClick="DeleteProject" Color="Color.Error" Size="Size.Small" Style="margin-left:16px;">
							<MudIcon Icon="@Icons.Material.Filled.Delete" />
						</MudButton>
					</MudTooltip>
				}
			</MudStack>
		</Actions>
		<ChildContent>
			<MudTabs Elevation="0" PanelClass="pa-6">
				<MudTabPanel Text="Resumen">
					<ProjectSummary Project="project" />
				</MudTabPanel>
				@if ((UserService.Permissions & Permissions.ViewProjectUsers) != 0)
				{
					<MudTabPanel Text="Usuarios">
						<MudText Typo="Typo.h6">Usuarios</MudText>
						<MudTable Hover T="FilteredUserDto" Class="mt-4" ServerData="ReloadUsers">
							<HeaderContent>
								<MudTh>Nombre</MudTh>
								<MudTh>Email</MudTh>
							</HeaderContent>
							<RowTemplate>
								<MudTd DataLabel="Nombre">@($"{context.FirstName} {context.LastName}")</MudTd>
								<MudTd DataLabel="Email">@context.Email</MudTd>
							</RowTemplate>
						</MudTable>
					</MudTabPanel>					
				}
				@if ((UserService.Permissions & Permissions.ViewProjectKpis) != 0)
				{
					<MudTabPanel Text="Tareas">
						<UsersKPIs ProjectId="@projectId" />
					</MudTabPanel>
					<MudTabPanel Text="Kpis">
						<SonarQubeKpis ProjectId="@ProjectId" />
					</MudTabPanel>
				}
			</MudTabs>
		</ChildContent>
	</Section>
}

@code {
	[Parameter]
	public string ProjectId { get; set; } = string.Empty;

	private Guid projectId { get => new Guid(ProjectId); }
	ProjectDto project = default!;
	bool loading = true;
	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine(UserService.Permissions);
		try
		{
			if (ProjectStateService.CurrentProject == null || ProjectStateService.CurrentProject.Id != projectId)
			{
				await ProjectStateService.LoadProject(projectId);
			}
			project = ProjectStateService.CurrentProject!;
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
			Snackbar.Add("Error al cargar el proyecto", Severity.Error);
			Nav.NavigateTo<ProjectsPage>();
		}
		finally
		{
			loading = false;
		}
		await base.OnInitializedAsync();
	}

	async Task<TableData<FilteredUserDto>> ReloadUsers(TableState tableState, CancellationToken cancellationToken)
	{
		GetUsersQueryParameters getUserQueryParameters = new GetUsersQueryParameters();
		var request = new FilteredPaginatedRequestDto<GetUsersQueryParameters> { Filters = getUserQueryParameters, Page = tableState.Page, PageSize = -1 };
		var response = await ProjectsApi.GetProjectUsers(new Guid(ProjectId), request);

		return new TableData<FilteredUserDto>() { TotalItems = response.TotalCount, Items = response.Items };
	}

	void OnEditButtonClick()
	{
		Dictionary<string, object> parameters = new();
		parameters.Add(nameof(EditProjectPage.ProjectId), project.Id.ToString());
		Nav.NavigateTo<EditProjectPage>(parameters);
	}

	async Task DeleteProject()
	{
		await ProjectsApi.DeleteProject(projectId);
		Nav.NavigateTo<ProjectsPage>();
	}

	async Task ArchiveProject()
	{
		try
		{
			await ProjectsApi.ArchiveProject(projectId);
			project.IsArchived = true;
			Snackbar.Add("Proyecto archivado", Severity.Success);
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Error al archivar: {ex.Message}", Severity.Error);
		}
	}

	async Task UnarchiveProject()
	{
		try
		{
			await ProjectsApi.UnarchiveProject(projectId);
			project.IsArchived = false;
			Snackbar.Add("Proyecto desarchivado", Severity.Success);
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Error al desarchivar: {ex.Message}", Severity.Error);
		}
	}
}
