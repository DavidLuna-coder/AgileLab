@page "/projects/{ProjectId}"
@using Front.ApiClient.Interfaces
@using Front.Components
@using Front.Helpers
@using Front.Services.StateService
@using Shared.DTOs.Pagination
@using Shared.DTOs.Projects
@using Shared.DTOs.Users

@inject IProjectsApi ProjectsApi
@inject ISnackbar Snackbar
@inject NavigationManager Nav
@inject IUsersApi UsersApi
@inject ProjectStateService ProjectStateService

@if (loading)
{
	<MudProgressLinear Indeterminate />
}
else
{
	<Section Title="@project.Name">
		<Actions>
			<MudButton OnClick="OnEditButtonClick">Editar</MudButton>
			<MudButton OnClick="DeleteProject">Eliminar</MudButton>
		</Actions>
		<ChildContent>
			<MudText Typo="Typo.h6">Descripción</MudText>
			<MudText Typo="Typo.body1">@project.Description</MudText>
			<MudTable T="FilteredUserDto" Class="mt-4" ServerData="ReloadUsers">
				<HeaderContent>
					<MudTh>Nombre</MudTh>
					<MudTh>Email</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd DataLabel="Nombre">@($"{context.FirstName} {context.LastName}")</MudTd>
					<MudTd DataLabel="Email">@context.Email</MudTd>
				</RowTemplate>
			</MudTable>
		</ChildContent>
	</Section>
}

@code {
	[Parameter]
	public string ProjectId { get; set; } = string.Empty;

	private Guid projectId { get => new Guid(ProjectId); }
	ProjectDto project = default!;
	bool loading = true;
	protected override async Task OnInitializedAsync()
	{
		try
		{
			if (ProjectStateService.CurrentProject == null || ProjectStateService.CurrentProject.Id != projectId)
			{
				await ProjectStateService.LoadProject(projectId);
			}
			project = ProjectStateService.CurrentProject!;
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
			Snackbar.Add("Error al cargar el proyecto", Severity.Error);
			Nav.NavigateTo<ProjectsPage>();
		}
		finally
		{
			loading = false;
		}
		await base.OnInitializedAsync();
	}

	async Task<TableData<FilteredUserDto>> ReloadUsers(TableState tableState, CancellationToken cancellationToken)
	{
		GetUsersQueryParameters getUserQueryParameters = new GetUsersQueryParameters();
		var request = new PaginatedRequestDto<GetUsersQueryParameters> { Filters = getUserQueryParameters, Page = tableState.Page, PageSize = tableState.PageSize };
		var response = await ProjectsApi.GetProjectUsers(new Guid(ProjectId), request);

		return new TableData<FilteredUserDto>() { TotalItems = response.TotalCount, Items = response.Items };
	}

	void OnEditButtonClick()
	{
		Dictionary<string, string> parameters = new();
		parameters.Add(nameof(EditProjectPage.ProjectId), project.Id.ToString());
		Nav.NavigateTo<EditProjectPage>(parameters);
	}

	async Task DeleteProject()
	{
		await ProjectsApi.DeleteProject(projectId);
		Nav.NavigateTo<ProjectsPage>();
	}
}
