@page "/projects/{ProjectId}/edit"
@using Front.ApiClient.Interfaces
@using Front.Components
@using Front.Components.Tables
@using Front.Helpers
@using Front.Services.StateService
@using Shared.DTOs.Pagination
@using Shared.DTOs.Projects
@using Shared.DTOs.Users
@inject ProjectStateService ProjectStateService
@inject IProjectsApi ProjectsApi
@inject IUsersApi UsersApi
@inject NavigationManager Nav

@if (project == null)
{
	<MudProgressLinear Indeterminate="true" />
}
else
{
	<Section Title="@project.Name">
		<ChildContent>
			<MudForm Model="model" @ref="_form">
				<MudTextField Label="Nombre" @bind-Value="model.Name" For="() => model.Name" Required />
				<MudTextField Class="mt-2" Label="Descripción" @bind-Value="model.Description" For="() => model.Description" />
				<UsersSelectionTable Class="mt-4" @bind-SelectedUsers="users"></UsersSelectionTable>
				<MudButton OnClick="UpdateProject" Color="Color.Primary" Variant="Variant.Filled">Guardar</MudButton>
				<MudButton OnClick="GoToProjectPage" Variant="Variant.Filled">Cancelar</MudButton>
			</MudForm>
		</ChildContent>
	</Section>
}

@code {
	[Parameter]
	public string ProjectId { get; set; } = string.Empty;

	MudForm _form = default!;
	Guid _projectId { get; set; }
	ProjectDto project = default!;
	UpdateProjectDto model = new();
	HashSet<FilteredUserDto> users = [];

	protected async override Task OnInitializedAsync()
	{
		_projectId = new Guid(ProjectId);
		if (ProjectStateService.CurrentProject == null || ProjectStateService.CurrentProject.Id != _projectId)
		{
			await ProjectStateService.LoadProject(_projectId);
		}
		project = ProjectStateService.CurrentProject!;
		model.Description = project.Description; 
		model.Name = project.Name;
		model.UsersIds = project.UsersIds;
		await base.OnInitializedAsync();
	}

	async Task UpdateProject()
	{
		await _form.Validate();
		if (!_form.IsValid) return;
		model.UsersIds = users.Select(u => u.Id).ToList();
		ProjectDto updatedProject = await ProjectsApi.UpdateProject(_projectId, model);
		ProjectStateService.CurrentProject = updatedProject;

		GoToProjectPage();
	}


	void GoToProjectPage()
	{
		Dictionary<string, string> parameters = new() { { nameof(ProjectPage.ProjectId), ProjectId } };
		Nav.NavigateTo<ProjectPage>(parameters);
	}
}
