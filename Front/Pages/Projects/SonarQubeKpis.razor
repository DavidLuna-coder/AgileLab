@using Front.ApiClient.Interfaces
@using Front.Components
@using Shared.Constants
@using Shared.DTOs.Projects.Metrics
@inject IProjectsApi ProjectsApi

<MudGrid>
	<!-- 1. Bugs, Code Smells y vulnerabilidades -->

	<MudItem xs="12" md="3">
		<KpiCard Title="Líneas de código" Value=@kpis.NCLoc IsLoading=isLoading Icon="@Icons.Material.Filled.Code"></KpiCard>
	</MudItem>
	<MudItem xs="12" md="3">
		<KpiCard Title="Vulnerabilidades" Value=@kpis.Vulnerabilities IsLoading=isLoading Icon="@Icons.Material.Filled.Security"></KpiCard>
	</MudItem>
	<MudItem xs="12" md="3">
		<KpiCard Title="Bugs" Value=@kpis.Bugs IsLoading=isLoading Icon="@Icons.Material.Filled.BugReport"></KpiCard>
	</MudItem>
	<MudItem xs="12" md="3">
		<KpiCard Title="Code Smells" Value=@kpis.Smells IsLoading=isLoading Icon="@Icons.Material.Filled.Build"></KpiCard>
	</MudItem>

	<!-- 3. Cobertura Meter un gauge -->
	<MudItem xs="12" md="4">
		<MudCard Style="height:100%">
			<MudCardHeader><MudText Typo="Typo.subtitle1">Cobertura</MudText></MudCardHeader>
			<MudCardContent class="d-flex justify-center">
				<MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
					@if (isLoading)
					{
						<MudSkeleton SkeletonType="SkeletonType.Circle" Width="150px" Height="150px" />
					}
					else
					{
						<MudChart ChartType="ChartType.Donut"
								  InputData="[kpis.Coverage, 100-kpis.Coverage]"
								  InputLabels="@(["Cubierto", "No cubierto"])"
								  Width="100%" />
					}
				</MudStack>
			</MudCardContent>
		</MudCard>
	</MudItem>

	<!-- 4. Ficheros más afectados -->
	<MudItem xs="12" md="8">
		<MudCard>
			<MudCardHeader><MudText Typo="Typo.subtitle1">Ficheros con más problemas</MudText></MudCardHeader>
			<MudCardContent>
				@if (!isLoading)
				{
					<MudChart Width="100%" ChartType="ChartType.Bar" XAxisLabels="@(fileNames)" ChartSeries="chartSeries" />
				}
				else
				{
					<MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="100%" />
				}
			</MudCardContent>
		</MudCard>
	</MudItem>

	<!-- Ficheros con más líneas de código -->
	<MudItem xs="12" md="6">
		<MudCard>
			<MudCardHeader><MudText Typo="Typo.subtitle1">Complejidad Ciclomática</MudText></MudCardHeader>
			<MudCardContent>

			</MudCardContent>
		</MudCard>
	</MudItem>
	<MudItem xs="12" md="6">
		<MudCard>
			<MudCardHeader><MudText Typo="Typo.subtitle1">Líneas de Código (Ncloc)</MudText></MudCardHeader>
			<MudCardContent>

			</MudCardContent>
		</MudCard>
	</MudItem>

	<!-- 7. Último Análisis -->
	<MudItem xs="12">
		<MudCard>
			<MudCardHeader>
				<MudText Typo="Typo.body2">
					Último análisis: <MudText Inline="true" Color="Color.Primary">2025-05-10</MudText>
				</MudText>
			</MudCardHeader>
			<MudCardContent>
				<MudText Typo="Typo.caption">“Build #42 – Análisis maestro”</MudText>
			</MudCardContent>
		</MudCard>
	</MudItem>
</MudGrid>

@code {
	[Parameter]
	public string ProjectId { get; set; }

	public Guid projectId { get => new Guid(ProjectId); }
	private List<ChartSeries> chartSeries;
	private ProjectMetricsDto projectMetrics;
	private SummaryKpi kpis = new();
	private bool isLoading = true;
	private string[] fileNames = [];

	protected override async Task OnInitializedAsync()
	{
		var projectMetricsTask = ProjectsApi.GetProjectMetrics(projectId);
		var projectMostAffectedFilesTask = ProjectsApi.GetMostAffectedFiles(projectId);

		projectMetrics = await projectMetricsTask;
		var test = await projectMostAffectedFilesTask;
		kpis = new()
		{
			NCLoc = int.Parse(projectMetrics.Measures.First(p => p.Metric == SonarMetricKeys.Ncloc).Value),
			Vulnerabilities = int.Parse(projectMetrics.Measures.First(p => p.Metric == SonarMetricKeys.Vulnerabilities).Value),
			Bugs = int.Parse(projectMetrics.Measures.First(p => p.Metric == SonarMetricKeys.Bugs).Value),
			Smells = int.Parse(projectMetrics.Measures.First(p => p.Metric == SonarMetricKeys.CodeSmells).Value),
			Coverage = double.Parse(projectMetrics.Measures.First(p => p.Metric == SonarMetricKeys.Coverage).Value),
		};

		chartSeries = new()
		{
			new(){ Name = "Líneas de código", Data = test.SelectMany(t => t.Measures).Where(m => m.Metric == SonarMetricKeys.Ncloc).Select(m => double.Parse(m.Value)).ToArray() },
			new(){ Name = "Vulnerabilidades", Data = test.SelectMany(t => t.Measures).Where(m => m.Metric == SonarMetricKeys.Vulnerabilities).Select(m => double.Parse(m.Value)).ToArray() },
			new(){ Name = "Bugs", Data = test.SelectMany(t => t.Measures).Where(m => m.Metric == SonarMetricKeys.Bugs).Select(m => double.Parse(m.Value)).ToArray() },
			new(){ Name = "Code Smells", Data = test.SelectMany(t => t.Measures).Where(m => m.Metric == SonarMetricKeys.CodeSmells).Select(m => double.Parse(m.Value)).ToArray() },
		};
		fileNames = test.Select(f => f.Name).ToArray();
		isLoading = false;
	}

	class SummaryKpi()
	{
		public int NCLoc { get; set; }
		public int Vulnerabilities { get; set; }
		public int Bugs { get; set; }
		public int Smells { get; set; }
		public double Coverage { get; set; }
	}
}