@inject IGoRaceExperiencesApi ExperiencesApi
@page "/experiences/create"
@using Front.ApiClient.Interfaces.GoRaceExperiences
@using Front.Components
@using Front.Components.Tables
@using Front.Helpers
@using Shared.DTOs.Pagination
@using Shared.DTOs.Projects
@inject NavigationManager NavigationManager
@inject IProjectsApi ProjectApi
<PageTitle>Crear experiencia</PageTitle>

<Section Title="Crear experiencia">
	<MudForm @ref="_form" Model="_createExperience">
		<MudStack>
			<MudTextField T="string" @bind-Value="_createExperience.Name" Label="Nombre" Required="true" />
			<MudTextField T="string" @bind-Value="_createExperience.Description" Label="Descripción" />
			<MudTextField T="string" @bind-Value="_createExperience.Token" Label="Token" />
			<MudGrid>
				<MudItem xs="4">
					<MudNumericField T="int" Min="0" @bind-Value="_createExperience.MaxQualityScore" Label="Puntuación máxima de calidad" Required="true" />
				</MudItem>
				<MudItem xs="4">
					<MudNumericField T="int" Min="0" @bind-Value="_createExperience.MaxOnTimeTasksScore" Label="Puntuación máxima de tareas a tiempo" Required="true" />
				</MudItem>
				<MudItem xs="4">
					<MudNumericField T="int" Min="0" @bind-Value="_createExperience.ImprovementScoreFactor" Label="Factor de mejora" Required="true" />
				</MudItem>
			</MudGrid>
			<MudSelect T="string" @bind-Value="_createExperience.ExperienceType" Label="Tipo" Required="true">
				<MudSelectItem Value="@GoRaceExperienceTypes.Project">Proyecto</MudSelectItem>
				<MudSelectItem Value="@GoRaceExperienceTypes.Platform">Plataforma</MudSelectItem>
			</MudSelect>
			@if (_createExperience.ExperienceType == GoRaceExperienceTypes.Project)
			{
				<MudAutocomplete @bind-Value=selectedProject Required Label="Proyecto" ShowProgressIndicator DebounceInterval=200 T="FilteredProjectDto" ToStringFunc=@((p) => p.Name) SearchFunc="SearchProjects">

				</MudAutocomplete>
			}
			else if (_createExperience.ExperienceType == GoRaceExperienceTypes.Platform)
			{
				<ProjectTable GetProjects="@GetProjectsAsync" MultiSelection @bind-ProjectOwners=projectOwners @bind-SelectedProjects=selectedProjects/>
			}

			<MudStack Row Justify="Justify.FlexEnd">
				<MudButton Disabled=isSaving OnClick="Cancel" Variant="Variant.Filled">Cancelar</MudButton>
				<MudButton Disabled=isSaving OnClick="SaveExperience" Variant=Variant.Filled Color="Color.Primary">Guardar</MudButton>
			</MudStack>
		</MudStack>
	</MudForm>
</Section>

@code {

	MudForm _form;
	CreateGoRaceExperienceDto _createExperience = new();
	FilteredProjectDto? selectedProject;
	HashSet<FilteredProjectDto> selectedProjects = new();
	List<ProjectOwnerDto> projectOwners = new();
	bool isSaving;
	async Task SaveExperience()
	{
		isSaving = true;
		await _form.Validate();
		if (!_form.IsValid)
		{
			isSaving = false;
			return;
		}
		if( _createExperience.ExperienceType == GoRaceExperienceTypes.Project)
		{
			_createExperience.ProjectId = selectedProject?.Id;
		}
		else if (_createExperience.ExperienceType == GoRaceExperienceTypes.Platform)
		{
			_createExperience.ProjectOwners = selectedProjects.Select(p => projectOwners.First(po => po.ProjectId == p.Id)).ToList();
		}
		await ExperiencesApi.Create(_createExperience);
		isSaving = false;
		NavigationManager.NavigateTo<ExperiencesPage>();
	}

	void Cancel() => NavigationManager.NavigateTo<ExperiencesPage>();

	async Task<IEnumerable<FilteredProjectDto>> SearchProjects(string s, CancellationToken token)
	{
		if (token.IsCancellationRequested)
		{
			return Enumerable.Empty<FilteredProjectDto>();
		}
		FilteredPaginatedRequestDto<ProjectQueryParameters> request = new()
		{
			Filters = new() { Name = s ?? string.Empty },
			Page = 0,
			PageSize = 10
		};
		var result = await ProjectApi.GetProjects(request);
		return result.Items;
	}

	private async Task<PaginatedResponseDto<FilteredProjectDto>> GetProjectsAsync(FilteredPaginatedRequestDto<ProjectQueryParameters> request)
	{
		return await ProjectApi.GetProjects(request);
	}

}