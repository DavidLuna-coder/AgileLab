@inject IGoRaceExperiencesApi ExperiencesApi
@page "/experiences/create"
@using Front.Components
@using Front.Helpers
@inject NavigationManager NavigationManager
<PageTitle>Crear experiencia</PageTitle>

<Section Title="Crear experiencia">
	<MudForm @ref="_form" Model="_createExperience">
		<MudStack>
			<MudTextField T="string" @bind-Value="_createExperience.Name" Label="Nombre" Required="true" />
			<MudTextField T="string" @bind-Value="_createExperience.Description" Label="Descripción" />
			<MudTextField T="string" @bind-Value="_createExperience.Token" Label="Token" />
			<MudSelect T="string" @bind-Value="_createExperience.ExperienceType" Label="Tipo" Required="true">
				<MudSelectItem Value="@GoRaceExperienceTypes.Project">Proyecto</MudSelectItem>
				<MudSelectItem Value="@GoRaceExperienceTypes.Platform">Plataforma</MudSelectItem>
			</MudSelect>
			@if (_createExperience.ExperienceType == GoRaceExperienceTypes.Project)
			{
				//Selector de proyecto con buscador por nombre
			}
			else if (_createExperience.ExperienceType == GoRaceExperienceTypes.Platform)
			{
				//Tabla de proyectos con selección múltiple
			}

			<MudStack Row Justify="Justify.FlexEnd">
				<MudButton OnClick="Cancel" Variant="Variant.Filled">Cancelar</MudButton>
				<MudButton OnClick="SaveExperience" Variant=Variant.Filled Color="Color.Primary">Guardar</MudButton>
			</MudStack>
		</MudStack>
	</MudForm>
</Section>

@code {

	MudForm _form;
	CreateGoRaceExperienceDto _createExperience = new();

	async Task SaveExperience()
	{
		await _form.Validate();
		if (!_form.IsValid)
		{
			return;
		}

		await ExperiencesApi.Create(_createExperience);
		NavigationManager.NavigateTo<ExperiencesPage>();
	}

	void Cancel() => NavigationManager.NavigateTo<ExperiencesPage>();


}