@page "/experiences"
@using Front.ApiClient.Interfaces.GoRaceExperiences
@using Front.Components
@using Front.Helpers
@using Front.Pages.Experiences
@inject IGoRaceExperiencesApi ExperiencesApi
@inject NavigationManager Nav
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Experiencias</PageTitle>

<MudContainer Fixed="true" Class="mt-6">
	<Section Title="Experiencias GoRace">
		<MudTable Hover @ref="_table" T="GoRaceExperienceDto" Elevation="1" ServerData="ReloadExperiences">
			<ToolBarContent>
				<MudStack Row>
					<MudText Typo="Typo.h6">Experiencias</MudText>
					<MudButton Variant=Variant.Filled Color="Color.Primary" OnClick="ShowCreateDialog">Crear experiencia</MudButton>
				</MudStack>
				<MudSpacer />
				<MudSelect T="string" Value="_selectedType" ValueChanged=TypeChanged Placeholder="Tipo" FitContent Dense Class="me-2" Style="min-width: 180px">
					<MudSelectItem Value="@GoRaceExperienceTypes.Project">Proyecto</MudSelectItem>
					<MudSelectItem Value="@GoRaceExperienceTypes.Platform">Plataforma</MudSelectItem>
				</MudSelect>
				<MudTextField OnKeyDown="OnKeyDown" OnAdornmentClick="_table.ReloadServerData" Immediate="true" @bind-Value="_search" Placeholder="Buscar por nombre" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
			</ToolBarContent>
			<HeaderContent>
				<MudTh>Nombre</MudTh>
				<MudTh>Fecha de creación</MudTh>
				<MudTh>Acciones</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Nombre">@context.Name</MudTd>
				<MudTd DataLabel="Fecha de creación">@context.CreatedAt.ToLocalTime().ToString()</MudTd>
				<MudTd DataLabel="Acciones">
					<MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => ShowEditDialog(context)">Editar</MudButton>
					<MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteExperience(context.Id)">Eliminar</MudButton>
				</MudTd>
			</RowTemplate>
			<NoRecordsContent>
				<MudText>No se han encontrado experiencias.</MudText>
				<MudButton OnClick="ShowCreateDialog">Crear una experiencia</MudButton>
			</NoRecordsContent>
			<PagerContent>
				@if (_experiences.Any())
				{
					<MudTablePager AllItemsText="Todas las experiencias" RowsPerPageString="Elementos por página" InfoFormat="{first_item}-{last_item} de {all_items}" />
				}
			</PagerContent>
		</MudTable>
	</Section>
</MudContainer>


@code {
	MudTable<GoRaceExperienceDto> _table;
	string _search = string.Empty;
	string _selectedType = GoRaceExperienceTypes.Project;
	IEnumerable<GoRaceExperienceDto> _experiences = [];
	bool _dialogOpen = false;
	GoRaceExperienceDto _editExperience = new();
	MudForm _form;
	bool _isEdit = false;

	private async Task<TableData<GoRaceExperienceDto>> ReloadExperiences(TableState tableState, CancellationToken cancellationToken)
	{
		var all = await ExperiencesApi.GetAll(_selectedType);
		var filtered = string.IsNullOrWhiteSpace(_search) ? all : all.Where(e => e.Name.Contains(_search, StringComparison.OrdinalIgnoreCase)).ToList();
		_experiences = filtered;
		return new TableData<GoRaceExperienceDto> { Items = _experiences.Skip(tableState.Page * tableState.PageSize).Take(tableState.PageSize), TotalItems = _experiences.Count() };
	}

	private async void OnKeyDown(KeyboardEventArgs args)
	{
		if (args.Key == "Enter")
		{
			await _table.ReloadServerData();
		}
	}

	async Task ShowCreateDialog()
	{
		Nav.NavigateTo<CreateExperiencePage>();
	}

	void ShowEditDialog(GoRaceExperienceDto exp)
	{
		_editExperience = new GoRaceExperienceDto
		{
			Id = exp.Id,
			Name = exp.Name,
			Description = exp.Description,
			Token = exp.Token,
			ExperienceType = exp.ExperienceType,
			ProjectId = exp.ProjectId,
			ProjectsIds = exp.ProjectsIds
		};
		_isEdit = true;
		_dialogOpen = true;
	}


	async Task DeleteExperience(Guid id)
	{
		try
		{
			await ExperiencesApi.Delete(id);
			Snackbar.Add("Experiencia eliminada", Severity.Success);
			await _table.ReloadServerData();
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Error: {ex.Message}", Severity.Error);
		}
	}

	void TypeChanged(string type)
	{
		_selectedType = type;
		_table.ReloadServerData();
	}
}
