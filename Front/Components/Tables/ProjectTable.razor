@using Front.Helpers
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Shared.DTOs.Pagination
@using Shared.DTOs.Projects

<MudTable Hover @ref=_table T="FilteredProjectDto" Comparer=_comparer Bordered="true" Elevation="1" ServerData="ReloadProjects" MultiSelection="@MultiSelection" SelectedItems="SelectedProjects" SelectedItemsChanged="OnSelectedProjectsChanged">
	<ToolBarContent>
		<div class="d-flex align-baseline justify-center gap-3">
			<MudText Typo="Typo.h6">Proyectos</MudText>
			@if (TableActions != null)
			{
				@TableActions
			}
		</div>
		<MudSpacer />
		<MudTextField OnKeyDown="OnKeyDown" OnAdornmentClick="_table.ReloadServerData" Immediate="true" @bind-Value="_search" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
	</ToolBarContent>

	<ColGroup>
		@if (MultiSelection)
		{
			<col style="width:5%;" />
			<col style="width:65%;" />
			<col style="width:30%;" />
		}
		else
		{
			<col style="width:70%;" />
			<col style="width:30%;" />
		}
	</ColGroup>

	<HeaderContent>
		<MudTh>Nombre</MudTh>
		@if (showOwners)
		{
			<MudTh>Representante</MudTh>
		}
		<MudTh>Fecha de creación</MudTh>
	</HeaderContent>

	<RowTemplate>
		@if (GetProjectUrl != null)
		{
			<MudTd DataLabel="Nombre"><MudLink Href="@GetProjectUrl(context.Id)">@context.Name</MudLink></MudTd>
		}
		else
		{
			<MudTd DataLabel="Nombre"><MudText>@context.Name</MudText></MudTd>
		}

		@if (showOwners)
		{
			<MudTd DataLabel="Representante">
				@if (SelectedProjects.Contains(context))
				{
					var owner = ProjectOwners.FirstOrDefault(po => po.ProjectId == context.Id)
					?? new ProjectOwnerDto
					{
						ProjectId = context.Id,
					};

					<MudSelect T="string"
							   Value="@owner.Email"
							   ValueChanged="(e) => SelecteOwnerChanged(context.Id, e)"
							   ToStringFunc="email => email"
							   Dense="true">
						@foreach (var member in context.Members)
						{
							<MudSelectItem T="string" Value="@member.Email">@member.Email</MudSelectItem>
						}
					</MudSelect>
				}
				else
				{
					<MudText>-</MudText>
				}
			</MudTd>
		}

		<MudTd DataLabel="Fecha de creación">@context.CreatedAt.ToLocalTime().ToString()</MudTd>
	</RowTemplate>

	<NoRecordsContent>
		@if (!string.IsNullOrEmpty(_lastSearch))
		{
			<MudText>No se han encontrado proyectos que contengan @_lastSearch en el nombre</MudText>
		}
		else
		{
			<MudText>Todavía no existen proyectos</MudText>
		}
		@if (OnCreateProjectClicked.HasDelegate)
		{
			<MudButton OnClick="OnCreateProject">Crear un proyecto</MudButton>
		}
	</NoRecordsContent>

	<PagerContent>
		@if (_projects.Any())
		{
			<MudTablePager AllItemsText="Todos los proyectos" RowsPerPageString="Elementos por página" InfoFormat="{first_item}-{last_item} de {all_items}" />
		}
	</PagerContent>
</MudTable>

@code {
	private MudTable<FilteredProjectDto> _table;
	private string _search = string.Empty;
	private string _lastSearch = string.Empty;
	private IEnumerable<FilteredProjectDto> _projects = Array.Empty<FilteredProjectDto>();

	[Parameter]
	public Func<FilteredPaginatedRequestDto<ProjectQueryParameters>, Task<PaginatedResponseDto<FilteredProjectDto>>>? GetProjects { get; set; }

	[Parameter]
	public EventCallback OnCreateProjectClicked { get; set; }

	[Parameter]
	public Func<Guid, string> GetProjectUrl { get; set; }

	[Parameter]
	public RenderFragment? TableActions { get; set; }

	[Parameter]
	public HashSet<FilteredProjectDto> SelectedProjects { get; set; } = new();

	[Parameter]
	public EventCallback<HashSet<FilteredProjectDto>> SelectedProjectsChanged { get; set; }

	[Parameter]
	public bool MultiSelection { get; set; }

	[Parameter]
	public List<ProjectOwnerDto> ProjectOwners { get; set; }

	[Parameter]
	public EventCallback<List<ProjectOwnerDto>> ProjectOwnersChanged { get; set; }

	private bool showOwners => ProjectOwners is not null;

	IEqualityComparer<FilteredProjectDto> _comparer = EqualityComparer<FilteredProjectDto>.Create(
		(x, y) => x?.Id == y?.Id,
		(x) => x.Id.GetHashCode()
	);

	private async Task<TableData<FilteredProjectDto>> ReloadProjects(TableState tableState, CancellationToken cancellationToken)
	{
		_lastSearch = _search;

		var projectQueryParameters = new ProjectQueryParameters { Name = _search };
		var request = new FilteredPaginatedRequestDto<ProjectQueryParameters>
		{
			Page = tableState.Page,
			PageSize = tableState.PageSize,
			Filters = projectQueryParameters
		};

		if (GetProjects is null)
			return new TableData<FilteredProjectDto> { Items = Array.Empty<FilteredProjectDto>(), TotalItems = 0 };

		var response = await GetProjects(request);
		_projects = response.Items;

		// Asegurar que todos los proyectos seleccionados tengan owner
		if (showOwners)
		{
			foreach (var project in _projects)
			{
				if (SelectedProjects.Contains(project))
				{
					var existing = ProjectOwners.FirstOrDefault(po => po.ProjectId == project.Id);
					if (existing == null)
					{
						ProjectOwners.Add(new ProjectOwnerDto
						{
							ProjectId = project.Id,
							Email = project.Members.FirstOrDefault()?.Email ?? string.Empty
						});
					}
				}
			}
		}

		await ProjectOwnersChanged.InvokeAsync(ProjectOwners);

		return new TableData<FilteredProjectDto>
		{
			Items = _projects,
			TotalItems = response.TotalCount
		};
	}

	private async void OnKeyDown(KeyboardEventArgs args)
	{
		if (args.Key == "Enter")
		{
			await _table.ReloadServerData();
		}
	}

	private void OnCreateProject()
	{
		OnCreateProjectClicked.InvokeAsync();
	}

	void OnSelectedProjectsChanged(HashSet<FilteredProjectDto> projects)
	{
		SelectedProjects = projects;

		if (showOwners)
		{
			foreach (var project in SelectedProjects)
			{
				var exists = ProjectOwners.Any(po => po.ProjectId == project.Id);
				if (!exists && project.Members?.Any() == true)
				{
					ProjectOwners.Add(new ProjectOwnerDto
					{
						ProjectId = project.Id,
						Email = project.Members.First().Email
					});
				}
			}

			ProjectOwnersChanged.InvokeAsync(ProjectOwners);
		}

		SelectedProjectsChanged.InvokeAsync(SelectedProjects);
	}

	void SelecteOwnerChanged(Guid projectId, string email)
	{
		var owner = ProjectOwners.FirstOrDefault(po => po.ProjectId == projectId);
		if (owner == null)
		{
			owner = new ProjectOwnerDto { ProjectId = projectId };
			ProjectOwners.Add(owner);
		}

		owner.Email = email;
		ProjectOwnersChanged.InvokeAsync(ProjectOwners);
	}
}
