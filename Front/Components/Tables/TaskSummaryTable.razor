@using Front.Helpers
@using Shared.DTOs.Filters
@using Shared.DTOs.Pagination
@using Shared.DTOs.Projects

<MudDataGrid Class="@Class" ServerData="GetTaskData"  T="TaskSummaryDto">
	<Columns>
		<HierarchyColumn T="TaskSummaryDto" />
		<PropertyColumn Property="t => t.Name" Title="Nombre" />
		<TemplateColumn Title="Enlace a OpenProject">
			<CellTemplate>
				<MudLink>@context.Item.OpenProjectTaskId</MudLink>
			</CellTemplate>
		</TemplateColumn>
	</Columns>
	<ChildRowContent>
		<MudCard>
			<MudCardHeader>
				<CardHeaderContent>
					<MudText Typo="Typo.h6">@context.Item.Name</MudText>
				</CardHeaderContent>
			</MudCardHeader>
			<MudCardContent>
				<MudText>Merge requests: </MudText>
				@foreach(var mr in context.Item.MergeRequests)
				{
					<div class="d-flex" style="width:100%">
						<MudText>@mr.Title</MudText>
						<MudChip Color="Color.Primary">@mr.CommitIds.FirstOrDefault()</MudChip>
						<MudDivider />
					</div>
				}
			</MudCardContent>
		</MudCard>
	</ChildRowContent>
</MudDataGrid>
@code {
	[Parameter]
	public Func<FilteredPaginatedRequestDto<GetTaskSummaryQueryFilters>, Task<PaginatedResponseDto<TaskSummaryDto>>> GetServerData { get; set; }
	[Parameter]
	public string Class { get; set; }
	async Task<GridData<TaskSummaryDto>> GetTaskData(GridState<TaskSummaryDto> gridState)
	{
		if (GetServerData == null) return new();

		FilteredPaginatedRequestDto<GetTaskSummaryQueryFilters> requestDto = gridState.ToFilteredPaginatedRequestDto<GetTaskSummaryQueryFilters, TaskSummaryDto>();
		requestDto.Filters = new();
		PaginatedResponseDto<TaskSummaryDto> response = await GetServerData(requestDto);
		return response.ToGridData<TaskSummaryDto>();
	}
}
