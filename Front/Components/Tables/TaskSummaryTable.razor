@using Front.Helpers
@using Shared.DTOs.Filters
@using Shared.DTOs.Pagination
@using Shared.DTOs.Projects

<MudGrid Class="mb-4" Spacing="4">
	<MudItem sm="12" md="6">
		<MudPaper Class="pa-4">
			<MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
				<MudChart ChartType="ChartType.Pie" InputData="[10,5]" Width="200px" InputLabels=@(["Tareas Completadas", "Tareas Pendientes"]) Height="200px" />
			</MudStack>
		</MudPaper>
	</MudItem>

	<MudItem sm="12" md="6">
		<MudPaper Class="pa-4">
			<MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
				<MudChart ChartType="ChartType.Pie" InputData="[30,30,10]" Width="200px" Height="200px" />
			</MudStack>
		</MudPaper>
	</MudItem>
</MudGrid>
<MudDataGrid Hover Class="@Class" ServerData="GetTaskData" T="TaskSummaryDto">
	<Columns>
		<HierarchyColumn T="TaskSummaryDto" />
		<PropertyColumn Property="t => t.Name" Title="Nombre" />
		<TemplateColumn Title="Enlace a OpenProject">
			<CellTemplate>
				<MudLink>@context.Item.OpenProjectTaskId</MudLink>
			</CellTemplate>
		</TemplateColumn>
	</Columns>
	<ChildRowContent>
		<MudCard Elevation="0">
			<MudCardHeader>
				<CardHeaderContent>
					<MudText Typo="Typo.h6">@context.Item.Name</MudText>
				</CardHeaderContent>
			</MudCardHeader>
			<MudCardContent>
				<MudText Typo="Typo.h6">Merge requests</MudText>
				<MudTable Elevation=0 T="TaskSummaryMergeRequestInfo" Items="@context.Item.MergeRequests">
					<HeaderContent>
						<MudTh>Id</MudTh>
						<MudTh>Título</MudTh>
						<MudTh>Último commit</MudTh>
					</HeaderContent>
					<RowTemplate Context=mr>
						<MudTd DataLabel="Id">@mr.Id</MudTd>
						<MudTd DataLabel="Title">@mr.Title</MudTd>
						<MudTd DataLabel="LastCommit"><MudChip Size="Size.Small" Color="Color.Primary">@mr.CommitIds.FirstOrDefault()</MudChip></MudTd>
					</RowTemplate>
				</MudTable>
			</MudCardContent>
		</MudCard>
	</ChildRowContent>
</MudDataGrid>
@code {
	[Parameter]
	public Func<FilteredPaginatedRequestDto<GetTaskSummaryQueryFilters>, Task<PaginatedResponseDto<TaskSummaryDto>>> GetServerData { get; set; }
	[Parameter]
	public string Class { get; set; }
	async Task<GridData<TaskSummaryDto>> GetTaskData(GridState<TaskSummaryDto> gridState)
	{
		if (GetServerData == null) return new();

		FilteredPaginatedRequestDto<GetTaskSummaryQueryFilters> requestDto = gridState.ToFilteredPaginatedRequestDto<GetTaskSummaryQueryFilters, TaskSummaryDto>();
		requestDto.Filters = new();
		PaginatedResponseDto<TaskSummaryDto> response = await GetServerData(requestDto);
		return response.ToGridData<TaskSummaryDto>();
	}
}
